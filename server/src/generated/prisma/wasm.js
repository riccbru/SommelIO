
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  uid: 'uid',
  username: 'username',
  full_name: 'full_name',
  birthdate: 'birthdate',
  email: 'email',
  password_hash: 'password_hash',
  admin: 'admin',
  premium: 'premium',
  google_id: 'google_id',
  facebook_id: 'facebook_id',
  apple_id: 'apple_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Wine_categoriesScalarFieldEnum = {
  id: 'id',
  code: 'code'
};

exports.Prisma.Wine_category_translationsScalarFieldEnum = {
  id: 'id',
  category_id: 'category_id',
  language_code: 'language_code',
  name: 'name'
};

exports.Prisma.TastingsScalarFieldEnum = {
  id: 'id',
  tid: 'tid',
  uid: 'uid',
  full_name: 'full_name',
  wine_category_id: 'wine_category_id',
  sample_number: 'sample_number',
  wine_denomination: 'wine_denomination',
  alcohol_content: 'alcohol_content',
  vintage: 'vintage',
  wine_temperature: 'wine_temperature',
  ambient_temperature: 'ambient_temperature',
  tasting_date: 'tasting_date',
  tasting_time: 'tasting_time',
  tasting_location: 'tasting_location',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Olfactory_examsScalarFieldEnum = {
  id: 'id',
  tid: 'tid',
  uuid: 'uuid',
  intensity: 'intensity',
  complexity: 'complexity',
  quality: 'quality',
  aromatic: 'aromatic',
  vinous: 'vinous',
  floral: 'floral',
  fruity: 'fruity',
  fragrant: 'fragrant',
  herbaceous: 'herbaceous',
  mineral: 'mineral',
  spicy: 'spicy',
  ethereal: 'ethereal',
  frank: 'frank',
  notes: 'notes'
};

exports.Prisma.Taste_olfactory_examsScalarFieldEnum = {
  id: 'id',
  tid: 'tid',
  uuid: 'uuid',
  sugars: 'sugars',
  alcohols: 'alcohols',
  polyalcohols: 'polyalcohols',
  acids: 'acids',
  tannins: 'tannins',
  minerals: 'minerals',
  balance: 'balance',
  intensity: 'intensity',
  persistence: 'persistence',
  quality: 'quality',
  structure: 'structure',
  notes: 'notes'
};

exports.Prisma.Visual_examsScalarFieldEnum = {
  id: 'id',
  tid: 'tid',
  uuid: 'uuid',
  limpidity: 'limpidity',
  color_family: 'color_family',
  color_shade: 'color_shade',
  consistency: 'consistency',
  bubble_grain: 'bubble_grain',
  bubble_number: 'bubble_number',
  bubble_persistence: 'bubble_persistence',
  notes: 'notes'
};

exports.Prisma.Final_considerationsScalarFieldEnum = {
  id: 'id',
  tid: 'tid',
  uuid: 'uuid',
  evolution: 'evolution',
  harmony: 'harmony',
  pairings: 'pairings',
  notes: 'notes'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  users: 'users',
  wine_categories: 'wine_categories',
  wine_category_translations: 'wine_category_translations',
  tastings: 'tastings',
  olfactory_exams: 'olfactory_exams',
  taste_olfactory_exams: 'taste_olfactory_exams',
  visual_exams: 'visual_exams',
  final_considerations: 'final_considerations'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
